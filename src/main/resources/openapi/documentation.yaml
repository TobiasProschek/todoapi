openapi: 3.1.1
info:
  title: Todo-API
  description: A comprehensive REST API for managing todos with full CRUD operations.
  version: 0.0.1
servers:
  - url: "http://127.0.0.1:8080"
    description: Local development
tags:
  - name: todo
paths:
  /api/todos:
    post:
      tags:
        - todo
      summary: Create a new todo
      description: Create a new todo
      operationId: addTodo
      requestBody:
        description: Create a new todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '201':
          description: Todo item was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /todos/{id}:
    get:
      tags:
        - todo
      summary: Get todo by its ID
      description: Return a single todo
      operationId: getTodoByID
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
    put:
      tags:
        - todo
      summary: Update Todo by its ID
      description: Update Todo
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          description: ID of the Todo to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existing todo in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/componemts/schemas/Todo'
    delete:
      tags:
        - todo
      summary: Delete todo by its ID
      description: Delete todo using its ID
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: todo id to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: todo deleted successfully
        '400':
          description: Invalid todo value
components:
  schemas:
    Todo:
      description: this todo object is an object to save todos
      required:
        - id
        - title
        - status
      type: object
      properties:
        id:
          type: String
          example: 5ec20b6f-eb01-47cd-845f-1ee842d8cde2
        title:
          type: string
          example: create a todo
        description:
          type: string
          example: Blablabla blsalal
        status:
          type: string
          enum:
            - OPEN
            - IN_PROGRESS
            - DONE
          example: IN_PROGRESS
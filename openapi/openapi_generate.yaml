openapi: 3.0.3
info:
  title: ToDo-API
  description: >-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification. 
    You can find out more about

    Swagger at [https://swagger.io](https://swagger.io). In the third iteration
    of the pet store, we've switched to the design first approach!

    You can now help us improve the API whether it's by making changes to the
    definition itself or to the code.

    That way, with time, we can improve the API in general, and expose some of
    the new features in OAS3.
  version: 0.0.1
tags:
  - name: todo
    description: Everything about ToDo's
paths:
  /todo:
    post:
      tags:
        - todo
      summary: Create a new ToDo
      description: Create a new todo
      operationId: addToDO
      requestBody:
        description: Create a new todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
          application/xml:
            schema:
              $ref: '#/components/schemas/ToDo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /todo/findByStatus:
    get:
      tags:
        - todo
      summary: Find ToDo's by status
      description: Search for ToDo's using the Status
      operationId: findToDoByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: OPEN
            enum:
              - OPEN
              - WAITING
              - PROGRESS
              - CLOSED
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToDo'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid status value
  /todo/{taskID}:
    get:
      tags:
        - todo
      summary: Find ToDo's by its ID
      description: Return a single ToDo
      operationId: getToDoByID
      parameters:
        - name: taskID
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - todo
      summary: Update ToDo by its ID
      description: Update ToDo
      operationId: updateToDo
      parameters:
        - name: taskID
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
          application/xml:
            schema:
              $ref: '#/components/schemas/ToDo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ToDo'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - todo
      summary: Delete ToDo's by its ID
      description: Delete ToDo's using its ID
      operationId: deleteToDo
      parameters:
        - name: taskID
          in: path
          description: ToDo id to delete
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid pet value
components:
  schemas:
    ToDo:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: create a todo
        shorttext:
          type: string
          example: Blablabla blsalal
        priority:
          type: string
          example: HIGH
          enum:
            - HIGH
            - MID
            - LOW
        status:
          type: string
          example: WAITING
          enum:
            - OPEN
            - WAITING
            - PROGRESS
            - CLOSED
      xml:
        name: todo

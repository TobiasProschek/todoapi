openapi: 3.0.3
info:
  title: ToDo-API
  version: 0.0.1
tags:
  - name: todo
paths:
  /todo:
    post:
      tags:
        - todo
      summary: Create a new ToDo
      description: Create a new todo
      operationId: addToDO
      requestBody:
        description: Create a new todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
          application/xml:
            schema:
              $ref: '#/components/schemas/ToDo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /todo/findByStatus:
    get:
      tags:
        - todo
      summary: Find ToDo's by status
      description: Search for ToDo's using the Status
      operationId: findToDoByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: OPEN
            enum:
              - OPEN
              - WAITING
              - PROGRESS
              - CLOSED
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToDo'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid status value
  /todo/{taskID}:
    get:
      tags:
        - todo
      summary: Find ToDo by its ID
      description: Return a single ToDo
      operationId: getToDoByID
      parameters:
        - name: taskID
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid ID supplied
        '404':
          description: ToDo not found
    put:
      tags:
        - todo
      summary: Update ToDo by its ID
      description: Update ToDo
      operationId: updateToDo
      parameters:
        - name: taskID
          in: path
          description: ID of the ToDo to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existing todo in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
          application/xml:
            schema:
              $ref: '#/components/schemas/ToDo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ToDo'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - todo
      summary: Delete ToDo by its ID
      description: Delete ToDo using its ID
      operationId: deleteToDo
      parameters:
        - name: taskID
          in: path
          description: ToDo id to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ToDo deleted successfully
        '400':
          description: Invalid ToDo value
components:
  schemas:
    ToDo:
      required:
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: create a todo
        shorttext:
          type: string
          example: Blablabla blsalal
        priority:
          type: integer
          format: int32
          minimum: 1
          maximum: 4
          example: 1
        status:
          type: string
          enum:
            - OPEN
            - WAITING
            - PROGRESS
            - CLOSED
          example: WAITING
      xml:
        name: todo
openapi: 3.0.3
info:
  title: Todo-API
  version: 0.0.1
tags:
  - name: todo
paths:
  /todo:
    post:
      tags:
        - todo
      summary: Create a new todo
      description: Create a new todo
      operationId: addToDO
      requestBody:
        description: Create a new todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '201':
          description: Todo item was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /todo/findByStatus:
    get:
      tags:
        - todo
      summary: Find todo by status
      description: Search for todo using the Status
      operationId: findTodoByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: OPEN
            enum:
              - OPEN
              - WAITING
              - PROGRESS
              - CLOSED
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid status value
  /todo/{taskID}:
    get:
      tags:
        - todo
      summary: Get todo by its ID
      description: Return a single todo
      operationId: getTodoByID
      parameters:
        - name: todoID
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo not found
    put:
      tags:
        - todo
      summary: Update Todo by its ID
      description: Update Todo
      operationId: updateTodo
      parameters:
        - name: todoID
          in: path
          description: ID of the Todo to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existing todo in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - todo
      summary: Delete todo by its ID
      description: Delete todo using its ID
      operationId: deleteTodo
      parameters:
        - name: todoID
          in: path
          description: todo id to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: todo deleted successfully
        '400':
          description: Invalid todo value
components:
  schemas:
    ToDo:
      required:
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: create a todo
        description:
          type: string
          example: Blablabla blsalal
        priority:
          type: integer
          format: int32
          minimum: 1
          maximum: 4
          example: 1
        status:
          type: string
          enum:
            - OPEN
            - WAITING
            - PROGRESS
            - CLOSED
          example: WAITING